-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.12 from parser_exp.y
-----------------------------------------------------------------------------

state 15 contains 1 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parser_exp -> Exp                           (0)
	Exp -> num                                         (1)
	Exp -> Exp '+' Exp                                 (2)
	Exp -> Exp '-' Exp                                 (3)
	Exp -> Exp '*' Exp                                 (4)
	Exp -> Exp '/' Exp                                 (5)
	Exp -> BracketExp1                                 (6)
	Exp -> BracketExp2                                 (7)
	Exp -> BracketExp3                                 (8)
	BracketExp1 -> '(' Exp ')'                         (9)
	BracketExp1 -> '(' BracketExp1 ')'                 (10)
	BracketExp2 -> '[' BracketExp1 ']'                 (11)
	BracketExp2 -> '[' BracketExp2 ']'                 (12)
	BracketExp3 -> '{' BracketExp2 '}'                 (13)
	BracketExp3 -> '{' BracketExp3 '}'                 (14)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	num            { NaturalNumber $$ }
	'+'            { Operator Plus }
	'-'            { Operator Minus }
	'*'            { Operator Times }
	'/'            { Operator Divide }
	'('            { TokenRoundBr Open }
	')'            { TokenRoundBr Close }
	'['            { TokenSquareBr Open }
	']'            { TokenSquareBr Close }
	'{'            { TokenGraphBr  Open }
	'}'            { TokenGraphBr Close }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parser_exp rule  0
	Exp             rules 1, 2, 3, 4, 5, 6, 7, 8
	BracketExp1     rules 9, 10
	BracketExp2     rules 11, 12
	BracketExp3     rules 13, 14

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	num            shift, and enter state 2
	'('            shift, and enter state 7
	'['            shift, and enter state 8
	'{'            shift, and enter state 9

	Exp            goto state 3
	BracketExp1    goto state 4
	BracketExp2    goto state 5
	BracketExp3    goto state 6

State 1


	num            shift, and enter state 2


State 2

	Exp -> num .                                        (rule 1)

	'+'            reduce using rule 1
	'-'            reduce using rule 1
	'*'            reduce using rule 1
	'/'            reduce using rule 1
	')'            reduce using rule 1
	%eof           reduce using rule 1


State 3

	%start_parser_exp -> Exp .                          (rule 0)
	Exp -> Exp . '+' Exp                                (rule 2)
	Exp -> Exp . '-' Exp                                (rule 3)
	Exp -> Exp . '*' Exp                                (rule 4)
	Exp -> Exp . '/' Exp                                (rule 5)

	'+'            shift, and enter state 16
	'-'            shift, and enter state 17
	'*'            shift, and enter state 18
	'/'            shift, and enter state 19
	%eof           accept


State 4

	Exp -> BracketExp1 .                                (rule 6)

	'+'            reduce using rule 6
	'-'            reduce using rule 6
	'*'            reduce using rule 6
	'/'            reduce using rule 6
	')'            reduce using rule 6
	%eof           reduce using rule 6


State 5

	Exp -> BracketExp2 .                                (rule 7)

	'+'            reduce using rule 7
	'-'            reduce using rule 7
	'*'            reduce using rule 7
	'/'            reduce using rule 7
	')'            reduce using rule 7
	%eof           reduce using rule 7


State 6

	Exp -> BracketExp3 .                                (rule 8)

	'+'            reduce using rule 8
	'-'            reduce using rule 8
	'*'            reduce using rule 8
	'/'            reduce using rule 8
	')'            reduce using rule 8
	%eof           reduce using rule 8


State 7

	BracketExp1 -> '(' . Exp ')'                        (rule 9)
	BracketExp1 -> '(' . BracketExp1 ')'                (rule 10)

	num            shift, and enter state 2
	'('            shift, and enter state 7
	'['            shift, and enter state 8
	'{'            shift, and enter state 9

	Exp            goto state 14
	BracketExp1    goto state 15
	BracketExp2    goto state 5
	BracketExp3    goto state 6

State 8

	BracketExp2 -> '[' . BracketExp1 ']'                (rule 11)
	BracketExp2 -> '[' . BracketExp2 ']'                (rule 12)

	'('            shift, and enter state 7
	'['            shift, and enter state 8

	BracketExp1    goto state 12
	BracketExp2    goto state 13

State 9

	BracketExp3 -> '{' . BracketExp2 '}'                (rule 13)
	BracketExp3 -> '{' . BracketExp3 '}'                (rule 14)

	'['            shift, and enter state 8
	'{'            shift, and enter state 9

	BracketExp2    goto state 10
	BracketExp3    goto state 11

State 10

	BracketExp3 -> '{' BracketExp2 . '}'                (rule 13)

	'}'            shift, and enter state 29


State 11

	BracketExp3 -> '{' BracketExp3 . '}'                (rule 14)

	'}'            shift, and enter state 28


State 12

	BracketExp2 -> '[' BracketExp1 . ']'                (rule 11)

	']'            shift, and enter state 27


State 13

	BracketExp2 -> '[' BracketExp2 . ']'                (rule 12)

	']'            shift, and enter state 26


State 14

	Exp -> Exp . '+' Exp                                (rule 2)
	Exp -> Exp . '-' Exp                                (rule 3)
	Exp -> Exp . '*' Exp                                (rule 4)
	Exp -> Exp . '/' Exp                                (rule 5)
	BracketExp1 -> '(' Exp . ')'                        (rule 9)

	'+'            shift, and enter state 16
	'-'            shift, and enter state 17
	'*'            shift, and enter state 18
	'/'            shift, and enter state 19
	')'            shift, and enter state 25


State 15

	Exp -> BracketExp1 .                                (rule 6)
	BracketExp1 -> '(' BracketExp1 . ')'                (rule 10)

	'+'            reduce using rule 6
	'-'            reduce using rule 6
	'*'            reduce using rule 6
	'/'            reduce using rule 6
	')'            shift, and enter state 24
			(reduce using rule 6)



State 16

	Exp -> Exp '+' . Exp                                (rule 2)

	num            shift, and enter state 2
	'('            shift, and enter state 7
	'['            shift, and enter state 8
	'{'            shift, and enter state 9

	Exp            goto state 23
	BracketExp1    goto state 4
	BracketExp2    goto state 5
	BracketExp3    goto state 6

State 17

	Exp -> Exp '-' . Exp                                (rule 3)

	num            shift, and enter state 2
	'('            shift, and enter state 7
	'['            shift, and enter state 8
	'{'            shift, and enter state 9

	Exp            goto state 22
	BracketExp1    goto state 4
	BracketExp2    goto state 5
	BracketExp3    goto state 6

State 18

	Exp -> Exp '*' . Exp                                (rule 4)

	num            shift, and enter state 2
	'('            shift, and enter state 7
	'['            shift, and enter state 8
	'{'            shift, and enter state 9

	Exp            goto state 21
	BracketExp1    goto state 4
	BracketExp2    goto state 5
	BracketExp3    goto state 6

State 19

	Exp -> Exp '/' . Exp                                (rule 5)

	num            shift, and enter state 2
	'('            shift, and enter state 7
	'['            shift, and enter state 8
	'{'            shift, and enter state 9

	Exp            goto state 20
	BracketExp1    goto state 4
	BracketExp2    goto state 5
	BracketExp3    goto state 6

State 20

	Exp -> Exp . '+' Exp                                (rule 2)
	Exp -> Exp . '-' Exp                                (rule 3)
	Exp -> Exp . '*' Exp                                (rule 4)
	Exp -> Exp . '/' Exp                                (rule 5)
	Exp -> Exp '/' Exp .                                (rule 5)

	'+'            reduce using rule 5
	'-'            reduce using rule 5
	'*'            reduce using rule 5
	'/'            reduce using rule 5
	')'            reduce using rule 5
	%eof           reduce using rule 5


State 21

	Exp -> Exp . '+' Exp                                (rule 2)
	Exp -> Exp . '-' Exp                                (rule 3)
	Exp -> Exp . '*' Exp                                (rule 4)
	Exp -> Exp '*' Exp .                                (rule 4)
	Exp -> Exp . '/' Exp                                (rule 5)

	'+'            reduce using rule 4
	'-'            reduce using rule 4
	'*'            reduce using rule 4
	'/'            reduce using rule 4
	')'            reduce using rule 4
	%eof           reduce using rule 4


State 22

	Exp -> Exp . '+' Exp                                (rule 2)
	Exp -> Exp . '-' Exp                                (rule 3)
	Exp -> Exp '-' Exp .                                (rule 3)
	Exp -> Exp . '*' Exp                                (rule 4)
	Exp -> Exp . '/' Exp                                (rule 5)

	'+'            reduce using rule 3
	'-'            reduce using rule 3
	'*'            shift, and enter state 18
	'/'            shift, and enter state 19
	')'            reduce using rule 3
	%eof           reduce using rule 3


State 23

	Exp -> Exp . '+' Exp                                (rule 2)
	Exp -> Exp '+' Exp .                                (rule 2)
	Exp -> Exp . '-' Exp                                (rule 3)
	Exp -> Exp . '*' Exp                                (rule 4)
	Exp -> Exp . '/' Exp                                (rule 5)

	'+'            reduce using rule 2
	'-'            reduce using rule 2
	'*'            shift, and enter state 18
	'/'            shift, and enter state 19
	')'            reduce using rule 2
	%eof           reduce using rule 2


State 24

	BracketExp1 -> '(' BracketExp1 ')' .                (rule 10)

	'+'            reduce using rule 10
	'-'            reduce using rule 10
	'*'            reduce using rule 10
	'/'            reduce using rule 10
	')'            reduce using rule 10
	']'            reduce using rule 10
	%eof           reduce using rule 10


State 25

	BracketExp1 -> '(' Exp ')' .                        (rule 9)

	'+'            reduce using rule 9
	'-'            reduce using rule 9
	'*'            reduce using rule 9
	'/'            reduce using rule 9
	')'            reduce using rule 9
	']'            reduce using rule 9
	%eof           reduce using rule 9


State 26

	BracketExp2 -> '[' BracketExp2 ']' .                (rule 12)

	'+'            reduce using rule 12
	'-'            reduce using rule 12
	'*'            reduce using rule 12
	'/'            reduce using rule 12
	')'            reduce using rule 12
	']'            reduce using rule 12
	'}'            reduce using rule 12
	%eof           reduce using rule 12


State 27

	BracketExp2 -> '[' BracketExp1 ']' .                (rule 11)

	'+'            reduce using rule 11
	'-'            reduce using rule 11
	'*'            reduce using rule 11
	'/'            reduce using rule 11
	')'            reduce using rule 11
	']'            reduce using rule 11
	'}'            reduce using rule 11
	%eof           reduce using rule 11


State 28

	BracketExp3 -> '{' BracketExp3 '}' .                (rule 14)

	'+'            reduce using rule 14
	'-'            reduce using rule 14
	'*'            reduce using rule 14
	'/'            reduce using rule 14
	')'            reduce using rule 14
	'}'            reduce using rule 14
	%eof           reduce using rule 14


State 29

	BracketExp3 -> '{' BracketExp2 '}' .                (rule 13)

	'+'            reduce using rule 13
	'-'            reduce using rule 13
	'*'            reduce using rule 13
	'/'            reduce using rule 13
	')'            reduce using rule 13
	'}'            reduce using rule 13
	%eof           reduce using rule 13


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 15
Number of terminals: 11
Number of non-terminals: 5
Number of states: 30
