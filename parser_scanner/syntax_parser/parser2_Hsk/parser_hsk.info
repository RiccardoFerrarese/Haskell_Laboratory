-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.12 from parser_hsk.y
-----------------------------------------------------------------------------

state 8 contains 5 shift/reduce conflicts.
state 10 contains 5 shift/reduce conflicts.
state 13 contains 1 shift/reduce conflicts.
state 25 contains 1 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parser_hsk -> Exp                           (0)
	Exp -> iden                                        (1)
	Exp -> num_const                                   (2)
	Exp -> iden FunArgs                                (3)
	Exp -> 'let' Assignments 'in' Exp                  (4)
	Exp -> 'case' Exp 'of' Cases                       (5)
	Exp -> BracketExp                                  (6)
	BracketExp -> '(' Exp ')'                          (7)
	BracketExp -> '(' BracketExp ')'                   (8)
	FunArgs -> Exp                                     (9)
	FunArgs -> Exp FunArgs                             (10)
	SingleAssignment -> iden '=' Exp                   (11)
	Assignments -> SingleAssignment                    (12)
	Assignments -> SingleAssignment ';' Assignments    (13)
	SingleCase -> iden '->' Exp                        (14)
	SingleCase -> num_const '->' Exp                   (15)
	Cases -> SingleCase                                (16)
	Cases -> 'otherwise' '->' Exp                      (17)
	Cases -> SingleCase ';' Cases                      (18)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'let'          { ReservedWord Let }
	'='            { ReservedWord ScannerHskP.Assignment }
	';'            { ReservedWord DotComma }
	'in'           { ReservedWord In }
	'case'         { ReservedWord Case }
	'of'           { ReservedWord Of }
	'->'           { ReservedWord RightArrow }
	'otherwise'    { ReservedWord Otherwise }
	'('            { BracketOpen }
	')'            { BracketClose }
	iden           { Identificator $$ }
	num_const      { NaturalConstant $$ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parser_hsk rule  0
	Exp             rules 1, 2, 3, 4, 5, 6
	BracketExp      rules 7, 8
	FunArgs         rules 9, 10
	SingleAssignment rule  11
	Assignments     rules 12, 13
	SingleCase      rules 14, 15
	Cases           rules 16, 17, 18

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	'let'          shift, and enter state 5
	'case'         shift, and enter state 6
	'('            shift, and enter state 7
	iden           shift, and enter state 8
	num_const      shift, and enter state 9

	Exp            goto state 3
	BracketExp     goto state 4

State 1


	iden           shift, and enter state 2


State 2

	Exp -> iden .                                       (rule 1)



State 3

	%start_parser_hsk -> Exp .                          (rule 0)

	%eof           accept


State 4

	Exp -> BracketExp .                                 (rule 6)

	'let'          reduce using rule 6
	';'            reduce using rule 6
	'in'           reduce using rule 6
	'case'         reduce using rule 6
	'of'           reduce using rule 6
	'('            reduce using rule 6
	')'            reduce using rule 6
	iden           reduce using rule 6
	num_const      reduce using rule 6
	%eof           reduce using rule 6


State 5

	Exp -> 'let' . Assignments 'in' Exp                 (rule 4)

	iden           shift, and enter state 17

	SingleAssignmentgoto state 15
	Assignments    goto state 16

State 6

	Exp -> 'case' . Exp 'of' Cases                      (rule 5)

	'let'          shift, and enter state 5
	'case'         shift, and enter state 6
	'('            shift, and enter state 7
	iden           shift, and enter state 8
	num_const      shift, and enter state 9

	Exp            goto state 14
	BracketExp     goto state 4

State 7

	BracketExp -> '(' . Exp ')'                         (rule 7)
	BracketExp -> '(' . BracketExp ')'                  (rule 8)

	'let'          shift, and enter state 5
	'case'         shift, and enter state 6
	'('            shift, and enter state 7
	iden           shift, and enter state 8
	num_const      shift, and enter state 9

	Exp            goto state 12
	BracketExp     goto state 13

State 8

	Exp -> iden .                                       (rule 1)
	Exp -> iden . FunArgs                               (rule 3)

	'let'          shift, and enter state 5
			(reduce using rule 1)

	';'            reduce using rule 1
	'in'           reduce using rule 1
	'case'         shift, and enter state 6
			(reduce using rule 1)

	'of'           reduce using rule 1
	'('            shift, and enter state 7
			(reduce using rule 1)

	')'            reduce using rule 1
	iden           shift, and enter state 8
			(reduce using rule 1)

	num_const      shift, and enter state 9
			(reduce using rule 1)

	%eof           reduce using rule 1

	Exp            goto state 10
	BracketExp     goto state 4
	FunArgs        goto state 11

State 9

	Exp -> num_const .                                  (rule 2)

	'let'          reduce using rule 2
	';'            reduce using rule 2
	'in'           reduce using rule 2
	'case'         reduce using rule 2
	'of'           reduce using rule 2
	'('            reduce using rule 2
	')'            reduce using rule 2
	iden           reduce using rule 2
	num_const      reduce using rule 2
	%eof           reduce using rule 2


State 10

	FunArgs -> Exp .                                    (rule 9)
	FunArgs -> Exp . FunArgs                            (rule 10)

	'let'          shift, and enter state 5
			(reduce using rule 9)

	';'            reduce using rule 9
	'in'           reduce using rule 9
	'case'         shift, and enter state 6
			(reduce using rule 9)

	'of'           reduce using rule 9
	'('            shift, and enter state 7
			(reduce using rule 9)

	')'            reduce using rule 9
	iden           shift, and enter state 8
			(reduce using rule 9)

	num_const      shift, and enter state 9
			(reduce using rule 9)

	%eof           reduce using rule 9

	Exp            goto state 10
	BracketExp     goto state 4
	FunArgs        goto state 24

State 11

	Exp -> iden FunArgs .                               (rule 3)

	'let'          reduce using rule 3
	';'            reduce using rule 3
	'in'           reduce using rule 3
	'case'         reduce using rule 3
	'of'           reduce using rule 3
	'('            reduce using rule 3
	')'            reduce using rule 3
	iden           reduce using rule 3
	num_const      reduce using rule 3
	%eof           reduce using rule 3


State 12

	BracketExp -> '(' Exp . ')'                         (rule 7)

	')'            shift, and enter state 23


State 13

	Exp -> BracketExp .                                 (rule 6)
	BracketExp -> '(' BracketExp . ')'                  (rule 8)

	')'            shift, and enter state 22
			(reduce using rule 6)



State 14

	Exp -> 'case' Exp . 'of' Cases                      (rule 5)

	'of'           shift, and enter state 21


State 15

	Assignments -> SingleAssignment .                   (rule 12)
	Assignments -> SingleAssignment . ';' Assignments    (rule 13)

	';'            shift, and enter state 20
	'in'           reduce using rule 12


State 16

	Exp -> 'let' Assignments . 'in' Exp                 (rule 4)

	'in'           shift, and enter state 19


State 17

	SingleAssignment -> iden . '=' Exp                  (rule 11)

	'='            shift, and enter state 18


State 18

	SingleAssignment -> iden '=' . Exp                  (rule 11)

	'let'          shift, and enter state 5
	'case'         shift, and enter state 6
	'('            shift, and enter state 7
	iden           shift, and enter state 8
	num_const      shift, and enter state 9

	Exp            goto state 32
	BracketExp     goto state 4

State 19

	Exp -> 'let' Assignments 'in' . Exp                 (rule 4)

	'let'          shift, and enter state 5
	'case'         shift, and enter state 6
	'('            shift, and enter state 7
	iden           shift, and enter state 8
	num_const      shift, and enter state 9

	Exp            goto state 31
	BracketExp     goto state 4

State 20

	Assignments -> SingleAssignment ';' . Assignments    (rule 13)

	iden           shift, and enter state 17

	SingleAssignmentgoto state 15
	Assignments    goto state 30

State 21

	Exp -> 'case' Exp 'of' . Cases                      (rule 5)

	'otherwise'    shift, and enter state 27
	iden           shift, and enter state 28
	num_const      shift, and enter state 29

	SingleCase     goto state 25
	Cases          goto state 26

State 22

	BracketExp -> '(' BracketExp ')' .                  (rule 8)

	'let'          reduce using rule 8
	';'            reduce using rule 8
	'in'           reduce using rule 8
	'case'         reduce using rule 8
	'of'           reduce using rule 8
	'('            reduce using rule 8
	')'            reduce using rule 8
	iden           reduce using rule 8
	num_const      reduce using rule 8
	%eof           reduce using rule 8


State 23

	BracketExp -> '(' Exp ')' .                         (rule 7)

	'let'          reduce using rule 7
	';'            reduce using rule 7
	'in'           reduce using rule 7
	'case'         reduce using rule 7
	'of'           reduce using rule 7
	'('            reduce using rule 7
	')'            reduce using rule 7
	iden           reduce using rule 7
	num_const      reduce using rule 7
	%eof           reduce using rule 7


State 24

	FunArgs -> Exp FunArgs .                            (rule 10)

	'let'          reduce using rule 10
	';'            reduce using rule 10
	'in'           reduce using rule 10
	'case'         reduce using rule 10
	'of'           reduce using rule 10
	'('            reduce using rule 10
	')'            reduce using rule 10
	iden           reduce using rule 10
	num_const      reduce using rule 10
	%eof           reduce using rule 10


State 25

	Cases -> SingleCase .                               (rule 16)
	Cases -> SingleCase . ';' Cases                     (rule 18)

	'let'          reduce using rule 16
	';'            shift, and enter state 36
			(reduce using rule 16)

	'in'           reduce using rule 16
	'case'         reduce using rule 16
	'of'           reduce using rule 16
	'('            reduce using rule 16
	')'            reduce using rule 16
	iden           reduce using rule 16
	num_const      reduce using rule 16
	%eof           reduce using rule 16


State 26

	Exp -> 'case' Exp 'of' Cases .                      (rule 5)

	'let'          reduce using rule 5
	';'            reduce using rule 5
	'in'           reduce using rule 5
	'case'         reduce using rule 5
	'of'           reduce using rule 5
	'('            reduce using rule 5
	')'            reduce using rule 5
	iden           reduce using rule 5
	num_const      reduce using rule 5
	%eof           reduce using rule 5


State 27

	Cases -> 'otherwise' . '->' Exp                     (rule 17)

	'->'           shift, and enter state 35


State 28

	SingleCase -> iden . '->' Exp                       (rule 14)

	'->'           shift, and enter state 34


State 29

	SingleCase -> num_const . '->' Exp                  (rule 15)

	'->'           shift, and enter state 33


State 30

	Assignments -> SingleAssignment ';' Assignments .    (rule 13)

	'in'           reduce using rule 13


State 31

	Exp -> 'let' Assignments 'in' Exp .                 (rule 4)

	'let'          reduce using rule 4
	';'            reduce using rule 4
	'in'           reduce using rule 4
	'case'         reduce using rule 4
	'of'           reduce using rule 4
	'('            reduce using rule 4
	')'            reduce using rule 4
	iden           reduce using rule 4
	num_const      reduce using rule 4
	%eof           reduce using rule 4


State 32

	SingleAssignment -> iden '=' Exp .                  (rule 11)

	';'            reduce using rule 11
	'in'           reduce using rule 11


State 33

	SingleCase -> num_const '->' . Exp                  (rule 15)

	'let'          shift, and enter state 5
	'case'         shift, and enter state 6
	'('            shift, and enter state 7
	iden           shift, and enter state 8
	num_const      shift, and enter state 9

	Exp            goto state 40
	BracketExp     goto state 4

State 34

	SingleCase -> iden '->' . Exp                       (rule 14)

	'let'          shift, and enter state 5
	'case'         shift, and enter state 6
	'('            shift, and enter state 7
	iden           shift, and enter state 8
	num_const      shift, and enter state 9

	Exp            goto state 39
	BracketExp     goto state 4

State 35

	Cases -> 'otherwise' '->' . Exp                     (rule 17)

	'let'          shift, and enter state 5
	'case'         shift, and enter state 6
	'('            shift, and enter state 7
	iden           shift, and enter state 8
	num_const      shift, and enter state 9

	Exp            goto state 38
	BracketExp     goto state 4

State 36

	Cases -> SingleCase ';' . Cases                     (rule 18)

	'otherwise'    shift, and enter state 27
	iden           shift, and enter state 28
	num_const      shift, and enter state 29

	SingleCase     goto state 25
	Cases          goto state 37

State 37

	Cases -> SingleCase ';' Cases .                     (rule 18)

	'let'          reduce using rule 18
	';'            reduce using rule 18
	'in'           reduce using rule 18
	'case'         reduce using rule 18
	'of'           reduce using rule 18
	'('            reduce using rule 18
	')'            reduce using rule 18
	iden           reduce using rule 18
	num_const      reduce using rule 18
	%eof           reduce using rule 18


State 38

	Cases -> 'otherwise' '->' Exp .                     (rule 17)

	'let'          reduce using rule 17
	';'            reduce using rule 17
	'in'           reduce using rule 17
	'case'         reduce using rule 17
	'of'           reduce using rule 17
	'('            reduce using rule 17
	')'            reduce using rule 17
	iden           reduce using rule 17
	num_const      reduce using rule 17
	%eof           reduce using rule 17


State 39

	SingleCase -> iden '->' Exp .                       (rule 14)

	'let'          reduce using rule 14
	';'            reduce using rule 14
	'in'           reduce using rule 14
	'case'         reduce using rule 14
	'of'           reduce using rule 14
	'('            reduce using rule 14
	')'            reduce using rule 14
	iden           reduce using rule 14
	num_const      reduce using rule 14
	%eof           reduce using rule 14


State 40

	SingleCase -> num_const '->' Exp .                  (rule 15)

	'let'          reduce using rule 15
	';'            reduce using rule 15
	'in'           reduce using rule 15
	'case'         reduce using rule 15
	'of'           reduce using rule 15
	'('            reduce using rule 15
	')'            reduce using rule 15
	iden           reduce using rule 15
	num_const      reduce using rule 15
	%eof           reduce using rule 15


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 19
Number of terminals: 12
Number of non-terminals: 8
Number of states: 41
